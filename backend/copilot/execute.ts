import { api, APIError } from "encore.dev/api";
import { getAuthData } from "~encore/auth";
import { pricing, strategy, analytics } from "~encore/clients";

export interface ExecuteCommandRequest {
  command: {
    tool_name: string;
    parameters: any;
  };
}

export interface ExecuteCommandResponse {
  success: boolean;
  message: string;
  result?: any;
}

// Executes a command generated by the AI Copilot.
export const execute = api<ExecuteCommandRequest, ExecuteCommandResponse>(
  { auth: true, expose: true, method: "POST", path: "/copilot/execute" },
  async (req) => {
    const auth = getAuthData()!;
    const { tool_name, parameters } = req.command;

    try {
      let result: any;
      switch (tool_name) {
        case 'update_price':
          result = await pricing.applyPrice({
            listingId: parameters.listingId,
            newPrice: parameters.newPrice,
          });
          break;
        
        case 'bulk_update_price':
          // In a real implementation, this would trigger a job
          console.log('Executing bulk update:', parameters);
          result = { success: true, message: 'Bulk update job started.' };
          break;

        case 'create_strategy':
          result = await strategy.customizeStrategy({
            name: parameters.name,
            baseStrategyType: parameters.baseStrategyType,
            customRules: parameters.rules,
          });
          break;

        case 'get_analytics':
          result = await analytics.getDashboard({ period: parameters.period });
          break;

        default:
          throw APIError.invalidArgument(`Unknown command: ${tool_name}`);
      }

      return {
        success: true,
        message: `Command '${tool_name}' executed successfully.`,
        result,
      };
    } catch (error) {
      console.error(`Error executing command '${tool_name}':`, error);
      throw APIError.internal(`Failed to execute command: ${error.message}`);
    }
  }
);
